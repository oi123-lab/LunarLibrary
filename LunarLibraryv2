local TweenService = game:GetService("TweenService")

local LunarLib = {}

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "LunarLib"
ScreenGui.Parent = game.CoreGui
ScreenGui.ResetOnSpawn = false

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 400, 0, 300)
MainFrame.Position = UDim2.new(0, 20, 1, -320)
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.BackgroundTransparency = 0.3
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui

local UICorner = Instance.new("UICorner", MainFrame)
UICorner.CornerRadius = UDim.new(0, 12)

local UIStroke = Instance.new("UIStroke", MainFrame)
UIStroke.Color = Color3.fromRGB(80, 80, 80)
UIStroke.Thickness = 1

-- Header
local Header = Instance.new("Frame", MainFrame)
Header.Size = UDim2.new(1, 0, 0, 45)
Header.BackgroundTransparency = 1

local TitleLabel = Instance.new("TextLabel", Header)
TitleLabel.Size = UDim2.new(0.7, 0, 1, 0)
TitleLabel.Position = UDim2.new(0, 15, 0, 0)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Font = Enum.Font.GothamBold
TitleLabel.TextSize = 22
TitleLabel.Text = "Lunar Hub"
TitleLabel.TextColor3 = Color3.fromRGB(235, 235, 235)
TitleLabel.TextXAlignment = Enum.TextXAlignment.Left

local SubTitleLabel = Instance.new("TextLabel", Header)
SubTitleLabel.Size = UDim2.new(0.7, 0, 0, 16)
SubTitleLabel.Position = UDim2.new(0, 15, 1, -20)
SubTitleLabel.BackgroundTransparency = 1
SubTitleLabel.Font = Enum.Font.Gotham
SubTitleLabel.TextSize = 12
SubTitleLabel.Text = "by oi123-lab"
SubTitleLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
SubTitleLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Close Button
local CloseBtn = Instance.new("ImageButton", Header)
CloseBtn.Size = UDim2.new(0, 28, 0, 28)
CloseBtn.Position = UDim2.new(1, -38, 0, 8)
CloseBtn.BackgroundTransparency = 1
CloseBtn.Image = "rbxassetid://3926305904"
CloseBtn.ImageColor3 = Color3.fromRGB(255, 80, 80)
CloseBtn.ScaleType = Enum.ScaleType.Fit
CloseBtn.AutoButtonColor = false
CloseBtn.Modal = true

-- Minimize Button
local MinimizeBtn = Instance.new("ImageButton", Header)
MinimizeBtn.Size = UDim2.new(0, 28, 0, 28)
MinimizeBtn.Position = UDim2.new(1, -72, 0, 8)
MinimizeBtn.BackgroundTransparency = 1
MinimizeBtn.Image = "rbxassetid://3926307971"
MinimizeBtn.ImageColor3 = Color3.fromRGB(255, 255, 120)
MinimizeBtn.ScaleType = Enum.ScaleType.Fit
MinimizeBtn.AutoButtonColor = false
MinimizeBtn.Modal = true

local minimized = false

local TabsFrame = Instance.new("ScrollingFrame", MainFrame)
TabsFrame.Size = UDim2.new(0, 120, 1, -45)
TabsFrame.Position = UDim2.new(0, 0, 0, 45)
TabsFrame.BackgroundTransparency = 1
TabsFrame.ScrollBarThickness = 0
TabsFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

local TabsLayout = Instance.new("UIListLayout", TabsFrame)
TabsLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabsLayout.Padding = UDim.new(0, 8)

local ContentFrame = Instance.new("Frame", MainFrame)
ContentFrame.Size = UDim2.new(1, -120, 1, -45)
ContentFrame.Position = UDim2.new(0, 120, 0, 45)
ContentFrame.BackgroundTransparency = 1
ContentFrame.ClipsDescendants = true

local selectedTab = nil
local tabs = {}

function LunarLib:CreateTab(name)
    local TabBtn = Instance.new("TextButton")
    TabBtn.Parent = TabsFrame
    TabBtn.Size = UDim2.new(1, -10, 0, 40)
    TabBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabBtn.AutoButtonColor = false
    TabBtn.Font = Enum.Font.GothamBold
    TabBtn.TextSize = 20
    TabBtn.Text = name
    TabBtn.TextColor3 = Color3.fromRGB(210, 210, 210)

    local TabContent = Instance.new("ScrollingFrame", ContentFrame)
    TabContent.Size = UDim2.new(1, 0, 1, 0)
    TabContent.Position = UDim2.new(0, 0, 0, 0)
    TabContent.BackgroundTransparency = 1
    TabContent.ScrollBarThickness = 5
    TabContent.Visible = false
    TabContent.ClipsDescendants = true

    local ContentLayout = Instance.new("UIListLayout", TabContent)
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentLayout.Padding = UDim.new(0, 10)

    local tab = {
        Button = TabBtn,
        Content = TabContent,
        Sections = {}
    }

    function tab:SetActive(active)
        if active then
            TabBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
            TabBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            TabContent.Visible = true
        else
            TabBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            TabBtn.TextColor3 = Color3.fromRGB(210, 210, 210)
            TabContent.Visible = false
        end
    end

    TabBtn.MouseButton1Click:Connect(function()
        if selectedTab then
            selectedTab:SetActive(false)
        end
        tab:SetActive(true)
        selectedTab = tab
    end)

    if not selectedTab then
        tab:SetActive(true)
        selectedTab = tab
    end

    function tab:AddSection(sectionName)
        local SectionFrame = Instance.new("Frame")
        SectionFrame.Size = UDim2.new(1, -20, 0, 40)
        SectionFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        SectionFrame.BorderSizePixel = 0
        SectionFrame.Parent = TabContent
        SectionFrame.ClipsDescendants = true

        local SectionLabel = Instance.new("TextLabel", SectionFrame)
        SectionLabel.Size = UDim2.new(1, 0, 0, 24)
        SectionLabel.Position = UDim2.new(0, 12, 0, 6)
        SectionLabel.BackgroundTransparency = 1
        SectionLabel.Font = Enum.Font.GothamBold
        SectionLabel.TextColor3 = Color3.fromRGB(210, 210, 210)
        SectionLabel.TextSize = 18
        SectionLabel.Text = sectionName
        SectionLabel.TextXAlignment = Enum.TextXAlignment.Left

        local SectionContent = Instance.new("Frame", SectionFrame)
        SectionContent.Size = UDim2.new(1, 0, 1, -30)
        SectionContent.Position = UDim2.new(0, 0, 0, 30)
        SectionContent.BackgroundTransparency = 1

        local SectionLayout = Instance.new("UIListLayout", SectionContent)
        SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
        SectionLayout.Padding = UDim.new(0, 6)

        local function updateSectionHeight()
            task.wait()
            local totalHeight = 0
            for _, child in ipairs(SectionContent:GetChildren()) do
                if child:IsA("GuiObject") then
                    totalHeight = totalHeight + child.Size.Y.Offset + SectionLayout.Padding.Offset
                end
            end
            SectionFrame.Size = UDim2.new(1, -20, 0, 30 + totalHeight)
        end

        local sectionAPI = {}

        function sectionAPI:AddButton(text, callback)
            local Btn = Instance.new("TextButton")
            Btn.Parent = SectionContent
            Btn.Size = UDim2.new(1, 0, 0, 32)
            Btn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            Btn.AutoButtonColor = false
            Btn.Font = Enum.Font.GothamBold
            Btn.TextSize = 18
            Btn.TextColor3 = Color3.fromRGB(255, 255, 255)
            Btn.Text = text

            Btn.MouseEnter:Connect(function()
                TweenService:Create(Btn, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(90, 90, 90)}):Play()
            end)
            Btn.MouseLeave:Connect(function()
                TweenService:Create(Btn, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}):Play()
            end)

            Btn.MouseButton1Click:Connect(function()
                if callback then callback() end
            end)

            updateSectionHeight()
            return Btn
        end

        function sectionAPI:AddToggle(text, default, callback)
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Parent = SectionContent
            ToggleFrame.Size = UDim2.new(1, 0, 0, 28)
            ToggleFrame.BackgroundTransparency = 1

            local Label = Instance.new("TextLabel", ToggleFrame)
            Label.Size = UDim2.new(0.75, 0, 1, 0)
            Label.Position = UDim2.new(0, 8, 0, 0)
            Label.BackgroundTransparency = 1
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 17
            Label.Text = text
            Label.TextColor3 = Color3.fromRGB(230, 230, 230)
            Label.TextXAlignment = Enum.TextXAlignment.Left

            local ToggleBtn = Instance.new("TextButton", ToggleFrame)
            ToggleBtn.Size = UDim2.new(0, 40, 0, 20)
            ToggleBtn.Position = UDim2.new(1, -48, 0, 4)
            ToggleBtn.BackgroundColor3 = default and Color3.fromRGB(100, 210, 100) or Color3.fromRGB(70, 70, 70)
            ToggleBtn.AutoButtonColor = false
            ToggleBtn.Text = ""
            ToggleBtn.ClipsDescendants = true
            ToggleBtn.BorderSizePixel = 0

            local Circle = Instance.new("Frame", ToggleBtn)
            Circle.Size = UDim2.new(0, 18, 0, 18)
            Circle.Position = default and UDim2.new(1, -19, 0, 1) or UDim2.new(0, 1, 0, 1)
            Circle.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
            Circle.BorderSizePixel = 0
            Circle.AnchorPoint = Vector2.new(0, 0)

            local toggled = default

            local function setToggle(state)
                toggled = state
                if toggled then
                    TweenService:Create(ToggleBtn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(100, 210, 100)}):Play()
                    TweenService:Create(Circle, TweenInfo.new(0.2), {Position = UDim2.new(1, -19, 0, 1)}):Play()
                else
                    TweenService:Create(ToggleBtn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}):Play()
                    TweenService:Create(Circle, TweenInfo.new(0.2), {Position = UDim2.new(0, 1, 0, 1)}):Play()
                end
                if callback then callback(toggled) end
            end

            ToggleBtn.MouseButton1Click:Connect(function()
                setToggle(not toggled)
            end)

            updateSectionHeight()
            return {
                Set = setToggle,
                Get = function() return toggled end,
                Frame = ToggleFrame
            }
        end

        function sectionAPI:AddSlider(text, min, max, default, callback)
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Parent = SectionContent
            SliderFrame.Size = UDim2.new(1, 0, 0, 50)
            SliderFrame.BackgroundTransparency = 1

            local Label = Instance.new("TextLabel", SliderFrame)
            Label.Size = UDim2.new(1, 0, 0, 20)
            Label.Position = UDim2.new(0, 8, 0, 0)
            Label.BackgroundTransparency = 1
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 16
            Label.TextColor3 = Color3.fromRGB(220, 220, 220)
            Label.Text = text

            local SliderBar = Instance.new("Frame", SliderFrame)
            SliderBar.Size = UDim2.new(1, -16, 0, 20)
            SliderBar.Position = UDim2.new(0, 8, 0, 28)
            SliderBar.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            SliderBar.ClipsDescendants = true
            SliderBar.AnchorPoint = Vector2.new(0, 0)
            SliderBar.BorderSizePixel = 0
            SliderBar.Rotation = 0
            SliderBar.AutoButtonColor = false

            local Fill = Instance.new("Frame", SliderBar)
            Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            Fill.BackgroundColor3 = Color3.fromRGB(100, 210, 100)
            Fill.BorderSizePixel = 0

            local Handle = Instance.new("ImageButton", SliderBar)
            Handle.Size = UDim2.new(0, 18, 0, 18)
            Handle.Position = UDim2.new(Fill.Size.X.Scale, -9, 0.5, -9)
            Handle.BackgroundTransparency = 1
            Handle.Image = "rbxassetid://3926305904"
            Handle.ImageColor3 = Color3.fromRGB(200, 200, 200)
            Handle.AutoButtonColor = false

            local dragging = false

            local function updateSlider(inputPosX)
                local relativePos = math.clamp(inputPosX - SliderBar.AbsolutePosition.X, 0, SliderBar.AbsoluteSize.X)
                local value = min + (relativePos / SliderBar.AbsoluteSize.X) * (max - min)
                Fill.Size = UDim2.new(relativePos / SliderBar.AbsoluteSize.X, 0, 1, 0)
                Handle.Position = UDim2.new(Fill.Size.X.Scale, -9, 0.5, -9)
                if callback then
                    callback(math.floor(value))
                end
            end

            Handle.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)

            Handle.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input.Position.X)
                end
            end)

            updateSlider(SliderBar.AbsolutePosition.X + ((default - min) / (max - min)) * SliderBar.AbsoluteSize.X)

            updateSectionHeight()
            return {
                Set = function(val)
                    val = math.clamp(val, min, max)
                    Fill.Size = UDim2.new((val - min) / (max - min), 0, 1, 0)
                    Handle.Position = UDim2.new(Fill.Size.X.Scale, -9, 0.5, -9)
                end,
                Get = function()
                    return min + Fill.Size.X.Scale * (max - min)
                end,
                Frame = SliderFrame
            }
        end

        function sectionAPI:AddDropdown(text, options, default, callback)
            local DropdownFrame = Instance.new("Frame")
            DropdownFrame.Parent = SectionContent
            DropdownFrame.Size = UDim2.new(1, 0, 0, 32)
            DropdownFrame.BackgroundTransparency = 1

            local Label = Instance.new("TextLabel", DropdownFrame)
            Label.Size = UDim2.new(0.7, 0, 1, 0)
            Label.Position = UDim2.new(0, 8, 0, 0)
            Label.BackgroundTransparency = 1
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 17
            Label.Text = text
            Label.TextColor3 = Color3.fromRGB(230, 230, 230)
            Label.TextXAlignment = Enum.TextXAlignment.Left

            local DropBtn = Instance.new("TextButton", DropdownFrame)
            DropBtn.Size = UDim2.new(0, 100, 1, 0)
            DropBtn.Position = UDim2.new(1, -110, 0, 0)
            DropBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            DropBtn.AutoButtonColor = false
            DropBtn.Font = Enum.Font.Gotham
            DropBtn.TextSize = 16
            DropBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            DropBtn.Text = default or options[1]

            local DropdownList = Instance.new("ScrollingFrame", DropdownFrame)
            DropdownList.Size = UDim2.new(0, 100, 0, 100)
            DropdownList.Position = UDim2.new(1, -110, 1, 4)
            DropdownList.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            DropdownList.BorderSizePixel = 0
            DropdownList.Visible = false
            DropdownList.ClipsDescendants = true
            DropdownList.ZIndex = 10
            DropdownList.AutomaticCanvasSize = Enum.AutomaticSize.Y
            DropdownList.ScrollBarThickness = 5

            local ListLayout = Instance.new("UIListLayout", DropdownList)
            ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            ListLayout.Padding = UDim.new(0, 2)

            local selectedValue = default or options[1]

            local function updateDropdownList()
                for i, option in ipairs(options) do
                    local optionBtn = Instance.new("TextButton")
                    optionBtn.Size = UDim2.new(1, -10, 0, 24)
                    optionBtn.Position = UDim2.new(0, 5, 0, (i - 1) * 26)
                    optionBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                    optionBtn.AutoButtonColor = false
                    optionBtn.Font = Enum.Font.Gotham
                    optionBtn.TextSize = 16
                    optionBtn.TextColor3 = Color3.fromRGB(240, 240, 240)
                    optionBtn.Text = option
                    optionBtn.Parent = DropdownList

                    optionBtn.MouseEnter:Connect(function()
                        TweenService:Create(optionBtn, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(90, 90, 90)}):Play()
                    end)
                    optionBtn.MouseLeave:Connect(function()
                        TweenService:Create(optionBtn, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}):Play()
                    end)

                    optionBtn.MouseButton1Click:Connect(function()
                        selectedValue = option
                        DropBtn.Text = option
                        DropdownList.Visible = false
                        if callback then callback(option) end
                    end)
                end
            end

            updateDropdownList()

            DropBtn.MouseButton1Click:Connect(function()
                DropdownList.Visible = not DropdownList.Visible
            end)

            updateSectionHeight()
            return {
                Get = function() return selectedValue end,
                Set = function(val)
                    if table.find(options, val) then
                        selectedValue = val
                        DropBtn.Text = val
                    end
                end,
                Frame = DropdownFrame
            }
        end

        updateSectionHeight()
        table.insert(tab.Sections, sectionAPI)
        return sectionAPI
    end

    table.insert(tabs, tab)
    return tab
end

-- Close button functionality
CloseBtn.MouseButton1Click:Connect(function()
    ScreenGui.Enabled = false
end)

-- Minimize button functionality
MinimizeBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        for _, tab in pairs(tabs) do
            tab.Content.Visible = false
            tab.Button.Visible = false
        end
        ContentFrame.Visible = false
        TabsFrame.Visible = false
        MainFrame.Size = UDim2.new(0, 200, 0, 45)
    else
        for _, tab in pairs(tabs) do
            tab.Button.Visible = true
        end
        if selectedTab then
            selectedTab.Content.Visible = true
        end
        ContentFrame.Visible = true
        TabsFrame.Visible = true
        MainFrame.Size = UDim2.new(0, 400, 0, 300)
    end
end)


return LunarLib
