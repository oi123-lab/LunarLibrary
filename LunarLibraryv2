local OrionLib = {}

local THEME = {
    MainColor = Color3.fromRGB(0, 170, 255),      -- Azul néon
    BackgroundColor = Color3.fromRGB(10, 10, 15), -- Preto quase transparente
    BackgroundTransparency = 0.3,                  -- Fundo translúcido
    TextColor = Color3.fromRGB(255, 255, 255),    -- Letras brancas
    StrokeColor = Color3.fromRGB(0, 140, 220),    -- Borda azul néon
    Font = Enum.Font.Gotham,
}

local function create(class, props)
    local inst = Instance.new(class)
    for i,v in pairs(props) do
        inst[i] = v
    end
    return inst
end

local function makeDraggable(frame, dragger)
    local UserInputService = game:GetService("UserInputService")
    local dragging, dragInput, dragStart, startPos

    dragger.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragger.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

function OrionLib:MakeWindow(options)
    local options = options or {}
    local windowName = options.Name or "OrionLib Window"
    local windowSize = options.Size or UDim2.new(0, 700, 0, 400)

    local ScreenGui = create("ScreenGui", {
        Name = "OrionLibGui",
        Parent = game:GetService("CoreGui"),
        ResetOnSpawn = false,
    })

    local mainFrame = create("Frame", {
        Parent = ScreenGui,
        Size = windowSize,
        Position = UDim2.new(0.5, -windowSize.X.Offset/2, 0.5, -windowSize.Y.Offset/2),
        BackgroundColor3 = THEME.BackgroundColor,
        BackgroundTransparency = THEME.BackgroundTransparency,
        BorderSizePixel = 0,
        ClipsDescendants = true,
    })

    local uiStroke = create("UIStroke", {
        Parent = mainFrame,
        Color = THEME.StrokeColor,
        Thickness = 2,
    })

    local header = create("Frame", {
        Parent = mainFrame,
        Size = UDim2.new(1, 0, 0, 36),
        BackgroundColor3 = THEME.BackgroundColor,
        BackgroundTransparency = THEME.BackgroundTransparency,
        BorderSizePixel = 0,
    })

    local headerLabel = create("TextLabel", {
        Parent = header,
        Text = windowName,
        Size = UDim2.new(1, -100, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = THEME.TextColor,
        Font = THEME.Font,
        TextSize = 20,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Center,
    })

    local closeBtn = create("TextButton", {
        Parent = header,
        Text = "✕",
        Size = UDim2.new(0, 40, 1, 0),
        Position = UDim2.new(1, -40, 0, 0),
        BackgroundColor3 = Color3.fromRGB(25, 25, 35),
        BorderSizePixel = 0,
        TextColor3 = THEME.TextColor,
        Font = THEME.Font,
        TextSize = 22,
    })

    local minimizeBtn = create("TextButton", {
        Parent = header,
        Text = "–",
        Size = UDim2.new(0, 40, 1, 0),
        Position = UDim2.new(1, -80, 0, 0),
        BackgroundColor3 = Color3.fromRGB(25, 25, 35),
        BorderSizePixel = 0,
        TextColor3 = THEME.TextColor,
        Font = THEME.Font,
        TextSize = 26,
    })

    local contentFrame = create("Frame", {
        Parent = mainFrame,
        Size = UDim2.new(1, 0, 1, -36),
        Position = UDim2.new(0, 0, 0, 36),
        BackgroundTransparency = 1,
        ClipsDescendants = true,
    })

    local tabsContainer = create("ScrollingFrame", {
        Parent = contentFrame,
        Size = UDim2.new(0, 140, 1, 0),
        BackgroundColor3 = Color3.fromRGB(15, 15, 35),
        BorderSizePixel = 0,
        ScrollBarThickness = 0,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ClipsDescendants = true,
    })

    local tabsLayout = create("UIListLayout", {
        Parent = tabsContainer,
        Padding = UDim.new(0, 5),
        SortOrder = Enum.SortOrder.LayoutOrder,
    })

    local tabContentContainer = create("Frame", {
        Parent = contentFrame,
        Size = UDim2.new(1, -140, 1, 0),
        Position = UDim2.new(0, 140, 0, 0),
        BackgroundColor3 = THEME.BackgroundColor,
        BackgroundTransparency = THEME.BackgroundTransparency,
        BorderSizePixel = 0,
        ClipsDescendants = true,
    })

    local contentStroke = create("UIStroke", {
        Parent = tabContentContainer,
        Color = THEME.StrokeColor,
        Thickness = 1,
    })

    local tabsList = {}

    function OrionLib:MakeTab(tabOptions)
        local tabName = tabOptions.Name or "Tab"

        local tabButton = create("TextButton", {
            Parent = tabsContainer,
            Text = tabName,
            Size = UDim2.new(1, -10, 0, 40),
            BackgroundColor3 = Color3.fromRGB(20, 20, 40),
            BorderSizePixel = 0,
            TextColor3 = THEME.TextColor,
            Font = THEME.Font,
            TextSize = 18,
        })

        local tabPage = create("ScrollingFrame", {
            Parent = tabContentContainer,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundColor3 = THEME.BackgroundColor,
            BackgroundTransparency = THEME.BackgroundTransparency,
            BorderSizePixel = 0,
            Visible = false,
            ScrollBarThickness = 5,
            CanvasSize = UDim2.new(0, 0, 0, 0),
        })

        local contentY = 10

        tabButton.MouseButton1Click:Connect(function()
            for _, v in pairs(tabsList) do
                v.Page.Visible = false
                v.Button.BackgroundColor3 = Color3.fromRGB(20, 20, 40)
            end
            tabPage.Visible = true
            tabButton.BackgroundColor3 = THEME.MainColor
        end)

        if #tabsList == 0 then
            tabPage.Visible = true
            tabButton.BackgroundColor3 = THEME.MainColor
        end

        table.insert(tabsList, {Button = tabButton, Page = tabPage})

        function tabPage:AddButton(buttonOptions)
            local buttonText = buttonOptions.Name or "Button"
            local callback = buttonOptions.Callback or function() end

            local button = create("TextButton", {
                Parent = tabPage,
                Text = buttonText,
                Size = UDim2.new(1, -20, 0, 40),
                Position = UDim2.new(0, 10, 0, contentY),
                BackgroundColor3 = THEME.MainColor,
                BorderSizePixel = 0,
                TextColor3 = Color3.new(0, 0, 0),
                Font = THEME.Font,
                TextSize = 18,
            })

            button.MouseButton1Click:Connect(function()
                pcall(callback)
            end)

            contentY = contentY + 50
            tabPage.CanvasSize = UDim2.new(0, 0, 0, contentY)
            return button
        end

        function tabPage:AddToggle(toggleOptions)
            local toggleText = toggleOptions.Name or "Toggle"
            local callback = toggleOptions.Callback or function() end
            local toggled = false

            local frame = create("Frame", {
                Parent = tabPage,
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, contentY),
                BackgroundTransparency = 1,
            })

            local label = create("TextLabel", {
                Parent = frame,
                Text = toggleText,
                Size = UDim2.new(0.8, 0, 1, 0),
                BackgroundTransparency = 1,
                TextColor3 = THEME.TextColor,
                Font = THEME.Font,
                TextSize = 18,
                TextXAlignment = Enum.TextXAlignment.Left,
            })

            local toggleBtn = create("TextButton", {
                Parent = frame,
                Size = UDim2.new(0, 40, 0, 20),
                Position = UDim2.new(0.85, 0, 0.15, 0),
                BackgroundColor3 = Color3.fromRGB(20, 20, 40),
                BorderSizePixel = 0,
                Text = "",
            })

            local uiStrokeToggle = create("UIStroke", {
                Parent = toggleBtn,
                Color = THEME.StrokeColor,
                Thickness = 1,
            })

            local toggleIndicator = create("Frame", {
                Parent = toggleBtn,
                Size = UDim2.new(0, 18, 1, 0),
                Position = UDim2.new(0, 2, 0, 0),
                BackgroundColor3 = Color3.fromRGB(40, 40, 80),
                BorderSizePixel = 0,
            })

            toggleBtn.MouseButton1Click:Connect(function()
                toggled = not toggled
                if toggled then
                    toggleIndicator.BackgroundColor3 = THEME.MainColor
                else
                    toggleIndicator.BackgroundColor3 = Color3.fromRGB(40, 40, 80)
                end
                pcall(callback, toggled)
            end)

            contentY = contentY + 40
            tabPage.CanvasSize = UDim2.new(0, 0, 0, contentY)

            return frame
        end

        function tabPage:AddSlider(sliderOptions)
            local sliderText = sliderOptions.Name or "Slider"
            local min = sliderOptions.Min or 0
            local max = sliderOptions.Max or 100
            local default = sliderOptions.Default or min
            local callback = sliderOptions.Callback or function() end

            local frame = create("Frame", {
                Parent = tabPage,
                Size = UDim2.new(1, -20, 0, 50),
                Position = UDim2.new(0, 10, 0, contentY),
                BackgroundTransparency = 1,
            })

            local label = create("TextLabel", {
                Parent = frame,
                Text = sliderText .. " : " .. tostring(default),
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                TextColor3 = THEME.TextColor,
                Font = THEME.Font,
                TextSize = 18,
                TextXAlignment = Enum.TextXAlignment.Left,
            })

            local sliderFrame = create("Frame", {
                Parent = frame,
                Size = UDim2.new(1, 0, 0, 20),
                Position = UDim2.new(0, 0, 0, 25),
                BackgroundColor3 = Color3.fromRGB(20, 20, 40),
                BorderSizePixel = 0,
            })

            local sliderFill = create("Frame", {
                Parent = sliderFrame,
                Size = UDim2.new((default - min)/(max - min), 0, 1, 0),
                BackgroundColor3 = THEME.MainColor,
                BorderSizePixel = 0,
            })

            local UserInputService = game:GetService("UserInputService")
            local dragging = false

           sliderFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)

            sliderFrame.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local relativePos = math.clamp((input.Position.X - sliderFrame.AbsolutePosition.X) / sliderFrame.AbsoluteSize.X, 0, 1)
                    sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                    local value = math.floor(min + (max - min) * relativePos + 0.5)
                    label.Text = sliderText .. " : " .. tostring(value)
                    pcall(callback, value)
                end
            end)

            contentY = contentY + 60
            tabPage.CanvasSize = UDim2.new(0, 0, 0, contentY)

            return frame
        end

        function tabPage:AddTextbox(textboxOptions)
            local textboxText = textboxOptions.Name or "Textbox"
            local callback = textboxOptions.Callback or function() end
            local placeholder = textboxOptions.Placeholder or ""

            local frame = create("Frame", {
                Parent = tabPage,
                Size = UDim2.new(1, -20, 0, 50),
                Position = UDim2.new(0, 10, 0, contentY),
                BackgroundTransparency = 1,
            })

            local label = create("TextLabel", {
                Parent = frame,
                Text = textboxText,
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                TextColor3 = THEME.TextColor,
                Font = THEME.Font,
                TextSize = 18,
                TextXAlignment = Enum.TextXAlignment.Left,
            })

            local textbox = create("TextBox", {
                Parent = frame,
                Size = UDim2.new(1, 0, 0, 25),
                Position = UDim2.new(0, 0, 0, 25),
                BackgroundColor3 = Color3.fromRGB(20, 20, 40),
                TextColor3 = THEME.TextColor,
                Font = THEME.Font,
                TextSize = 18,
                ClearTextOnFocus = false,
                Text = "",
                PlaceholderText = placeholder,
                BorderSizePixel = 0,
            })

            textbox.Focused:Connect(function()
                textbox.BackgroundColor3 = THEME.MainColor
                textbox.TextColor3 = Color3.new(0,0,0)
            end)

            textbox.FocusLost:Connect(function(enterPressed)
                textbox.BackgroundColor3 = Color3.fromRGB(20, 20, 40)
                textbox.TextColor3 = THEME.TextColor
                if enterPressed then
                    pcall(callback, textbox.Text)
                end
            end)

            contentY = contentY + 60
            tabPage.CanvasSize = UDim2.new(0, 0, 0, contentY)

            return frame
        end

        function tabPage:AddDropdown(dropdownOptions)
            local dropdownText = dropdownOptions.Name or "Dropdown"
            local optionsList = dropdownOptions.Options or {}
            local callback = dropdownOptions.Callback or function() end
            local selected = nil

            local frame = create("Frame", {
                Parent = tabPage,
                Size = UDim2.new(1, -20, 0, 40),
                Position = UDim2.new(0, 10, 0, contentY),
                BackgroundTransparency = 1,
            })

            local label = create("TextLabel", {
                Parent = frame,
                Text = dropdownText,
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                TextColor3 = THEME.TextColor,
                Font = THEME.Font,
                TextSize = 18,
                TextXAlignment = Enum.TextXAlignment.Left,
            })

            local dropdownBtn = create("TextButton", {
                Parent = frame,
                Size = UDim2.new(1, 0, 0, 20),
                Position = UDim2.new(0, 0, 0, 20),
                BackgroundColor3 = Color3.fromRGB(20, 20, 40),
                BorderSizePixel = 0,
                Text = "Select...",
                TextColor3 = THEME.TextColor,
                Font = THEME.Font,
                TextSize = 16,
            })

            local dropdownFrame = create("Frame", {
                Parent = frame,
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 1, 0),
                BackgroundColor3 = Color3.fromRGB(20, 20, 40),
                BorderSizePixel = 0,
                ClipsDescendants = true,
            })

            local dropdownLayout = create("UIListLayout", {
                Parent = dropdownFrame,
                Padding = UDim.new(0, 2),
                SortOrder = Enum.SortOrder.LayoutOrder,
            })

            local open = false

            dropdownBtn.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    local totalHeight = #optionsList * 25 + 4
                    dropdownFrame:TweenSize(UDim2.new(1, 0, 0, totalHeight), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)
                else
                    dropdownFrame:TweenSize(UDim2.new(1, 0, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)
                end
            end)

            for i, option in ipairs(optionsList) do
                local optionBtn = create("TextButton", {
                    Parent = dropdownFrame,
                    Text = option,
                    Size = UDim2.new(1, 0, 0, 25),
                    BackgroundColor3 = Color3.fromRGB(30, 30, 50),
                    BorderSizePixel = 0,
                    TextColor3 = THEME.TextColor,
                    Font = THEME.Font,
                    TextSize = 16,
                })

                optionBtn.MouseButton1Click:Connect(function()
                    dropdownBtn.Text = option
                    selected = option
                    open = false
                    dropdownFrame:TweenSize(UDim2.new(1, 0, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)
                    pcall(callback, option)
                end)
            end

            contentY = contentY + 50
            tabPage.CanvasSize = UDim2.new(0, 0, 0, contentY)

            return frame
        end

        return tabPage
    end

    closeBtn.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    local minimized = false
    minimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            mainFrame.Size = UDim2.new(0, 200, 0, 36)
            contentFrame.Visible = false
        else
            mainFrame.Size = windowSize
            contentFrame.Visible = true
        end
    end)

    makeDraggable(mainFrame, header)

    self.ScreenGui = ScreenGui
    self.MainFrame = mainFrame
    self.TabsContainer = tabsContainer
    self.TabContentContainer = tabContentContainer
    self.TabsList = tabsList

    return self
end

return OrionLib
